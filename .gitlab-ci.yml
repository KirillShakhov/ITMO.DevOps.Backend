stages:
  - sonarqube-check
  - sonarqube-vulnerability-report
  - build
  - test
  - docker-build

before_script:
  - docker info
  - export GRADLE_USER_HOME=`pwd`/.gradle

build-auth:
  stage: build
  script:
    - ./gradlew auth:bootJar
    - ls -l auth/build/libs/
  artifacts:
    paths:
      - auth/build/libs/*.jar
    expire_in: 1 week
  only:
    - master

sonarqube-check:
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: ./gradlew sonar
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=devops&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check

test-auth:
  stage: test
  script:
    - ./gradlew auth:test
  needs:
    - build-auth
  only:
    - master

build-chat:
  stage: build
  script:
    - ./gradlew chat:bootJar
    - ls -l chat/build/libs/
  artifacts:
    paths:
      - chat/build/libs/*.jar
    expire_in: 1 week
  only:
    - master

test-chat:
  stage: test
  script:
    - ./gradlew chat:test
  needs:
    - build-chat
  only:
    - master

build-facade:
  stage: build
  script:
    - ./gradlew facade:bootJar
    - ls -l facade/build/libs/
  artifacts:
    paths:
      - facade/build/libs/*.jar
    expire_in: 1 week
  only:
    - master

test-facade:
  stage: test
  script:
    - ./gradlew facade:test
  needs:
    - build-facade
  only:
    - master

build-mediafiles:
  stage: build
  script:
    - ./gradlew mediafiles:bootJar
    - ls -l mediafiles/build/libs/
  artifacts:
    paths:
      - mediafiles/build/libs/*.jar
    expire_in: 1 week
  only:
    - master

test-mediafiles:
  stage: test
  script:
    - ./gradlew mediafiles:test
  needs:
    - build-mediafiles
  only:
    - master

docker-build-auth:
  stage: docker-build
  script:
    - cd auth
    - ls
    - docker build --platform linux/arm64 -t kirillshakhov/auth-service:$CI_COMMIT_SHORT_SHA .
    - docker push kirillshakhov/auth-service:$CI_COMMIT_SHORT_SHA
  only:
    - master
  dependencies:
    - build-auth

docker-build-chat:
  stage: docker-build
  script:
    - cd chat
    - ls
    - docker build --platform linux/arm64 -t kirillshakhov/chat-service:$CI_COMMIT_SHORT_SHA .
    - docker push kirillshakhov/chat-service:$CI_COMMIT_SHORT_SHA
  only:
    - master
  dependencies:
    - build-chat

docker-build-facade:
  stage: docker-build
  script:
    - cd facade
    - ls
    - docker build --platform linux/arm64 -t kirillshakhov/facade-service:$CI_COMMIT_SHORT_SHA .
    - docker push kirillshakhov/facade-service:$CI_COMMIT_SHORT_SHA
  only:
    - master
  dependencies:
    - build-facade

docker-build-mediafiles:
  stage: docker-build
  script:
    - cd mediafiles
    - ls
    - docker build --platform linux/arm64 -t kirillshakhov/mediafiles-service:$CI_COMMIT_SHORT_SHA .
    - docker push kirillshakhov/mediafiles-service:$CI_COMMIT_SHORT_SHA
  only:
    - master
  dependencies:
    - build-mediafiles

after_script:
  - echo "//////////////// End CI ////////////////"
